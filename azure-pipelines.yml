trigger:
  - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

# Add PowerShell task to read version from csproj
- task: PowerShell@2
  name: SetVersion
  inputs:
    targetType: 'inline'
    script: |
      $csprojFile = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.csproj" -Recurse | Select-Object -First 1
      if ($csprojFile) {
          Write-Host "Found project file: $($csprojFile.FullName)"
          [xml]$xml = Get-Content $csprojFile.FullName
          $version = $xml.Project.PropertyGroup.PackageVersion
          Write-Host "Found version: $version"
          Write-Host "##vso[task.setvariable variable=PackageVersion]$version"
      } else {
          Write-Error "No .csproj file found!"
          exit 1
      }

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: 'NugetPackages/domain-models-services'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Pack'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'PackageVersion'
    configuration: $(buildConfiguration)

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'NugetPackages/domain-models-services'